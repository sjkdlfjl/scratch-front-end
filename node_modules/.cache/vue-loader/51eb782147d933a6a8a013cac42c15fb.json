{"remainingRequest":"E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\src\\components\\Jsmind.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\src\\components\\Jsmind.vue","mtime":1697979069057},{"path":"E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\node_modules\\css-loader\\dist\\cjs.js","mtime":1697458786426},{"path":"E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1697458780078},{"path":"E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\node_modules\\postcss-loader\\src\\index.js","mtime":1697458783431},{"path":"E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\node_modules\\less-loader\\dist\\cjs.js","mtime":1697458774760},{"path":"E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1697458786430},{"path":"E:\\毕设\\vue-jsmind-main\\vue-jsmind-main\\node_modules\\vue-loader\\lib\\index.js","mtime":1697458776746}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJy4uL2Fzc2V0cy9jc3Mvc3R5bGUubGVzcyc7Cg=="},{"version":3,"sources":["Jsmind.vue"],"names":[],"mappingsqvBA","file":"Jsmind.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    class=\"jsmind\"\n  >\n    <!-- 右上角菜单 -->\n    <div class=\"toolbar\">\n      <ul class=\"toolbar-list\">\n        <li class=\"item\">\n          <span\n            size=\"16\"\n            class=\"percent\"\n            style=\"font-size: 14px; color: rgb(29, 29, 31)\"\n            @click=\"zoom.value = 100\"\n            >{{ zoom.value }}%\n          </span>\n          <div class=\"scale-slide\">\n            <ul>\n              <li class=\"normal-item\" title=\"Canvas shrink\" @click=\"zoomOut\">\n                <svg\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 16 16\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M12.98 11.95l2.91 2.9c.15.15.15.38 0 .53l-.51.51a.37.37 0 01-.52 0L11.95 13a7.32 7.32 0 111.03-1.03zm-5.66 1.22a5.85 5.85 0 100-11.7 5.85 5.85 0 000 11.7zM4.76 6.6h5.12c.2 0 .37.16.37.36v.73c0 .2-.17.37-.37.37H4.76a.37.37 0 01-.37-.37v-.73c0-.2.16-.36.37-.36z\"\n                    fill=\"#2B2F36\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                </svg>\n              </li>\n\n              <li class=\"slider\">\n                <el-slider\n                  v-model=\"zoom.value\"\n                  :show-tooltip=\"false\"\n                  :min=\"zoom.min\"\n                  :max=\"zoom.max\"\n                ></el-slider>\n              </li>\n\n              <li class=\"normal-item\" title=\"Canvas zoom\" @click=\"zoomIn\">\n                <svg\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 16 16\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M12.98 11.95l2.91 2.9c.15.15.15.38 0 .53l-.51.51a.37.37 0 01-.52 0L11.95 13a7.32 7.32 0 111.03-1.03zm-6.4-5.36V4.76c0-.2.17-.37.37-.37h.73c.2 0 .37.16.37.37v1.83h1.83c.2 0 .37.16.37.36v.73c0 .2-.17.37-.37.37H8.05v1.83c0 .2-.16.37-.37.37h-.73a.37.37 0 01-.36-.37V8.05H4.76a.37.37 0 01-.37-.37v-.73c0-.2.16-.36.37-.36h1.83zm.74 6.58a5.85 5.85 0 100-11.7 5.85 5.85 0 000 11.7z\"\n                    fill=\"#2B2F36\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                </svg>\n              </li>\n            </ul>\n          </div>\n        </li>\n\n        \n\n        <div\n          class=\"reset item normal-item\"\n          title=\"Target the central topic\"\n          @click=\"reset\"\n        >\n          <svg\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M.77 0h3.46c.21 0 .38.17.38.38v.77c0 .22-.17.39-.38.39h-2.7v2.7c0 .2-.16.38-.38.38H.38A.38.38 0 010 4.23V.77C0 .34.34 0 .77 0zm14.45 16h-3.46a.38.38 0 01-.38-.39v-.76c0-.22.17-.39.38-.39h2.7v-2.7c0-.2.17-.38.38-.38h.77c.21 0 .38.18.38.39v3.46c0 .43-.34.77-.77.77zM0 15.23v-3.46c0-.21.17-.39.38-.39h.77c.22 0 .39.18.39.39v2.7h2.69c.21 0 .38.16.38.38v.77c0 .2-.17.38-.38.38H.77a.77.77 0 01-.77-.77zM16 .78v3.46c0 .21-.17.38-.38.38h-.77a.38.38 0 01-.39-.38v-2.7h-2.69a.38.38 0 01-.38-.38V.4c0-.2.17-.38.38-.38h3.46c.43 0 .77.34.77.77zm-8 9.99a2.77 2.77 0 110-5.54 2.77 2.77 0 010 5.54z\"\n              fill=\"#2B2F36\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </svg>\n        </div>\n      </ul>\n    </div>\n\n    <div class=\"top-bar\">\n      <ul class=\"filter\">\n        <li\n          :class=\"[item.type, item.status && 'active']\"\n          @click=\"toggleFilter(item)\"\n          v-for=\"item in filterTypes\"\n          :key=\"item.value\"\n        >\n          <i></i>\n          <span>{{ item.name }}</span>\n        </li>\n      </ul>\n\n      <span class=\"export\" @click=\"screen_shot\">Export picture</span>\n    </div>\n\n    <div class=\"jsmind_layout\">\n      <div\n        id=\"jsmind_container\"\n        ref=\"container\"\n        @click=\"nodeClick\"\n        @contextmenu.prevent.stop=\"nodeClick\"\n      ></div>\n\n      <el-dialog\n        :title=\"createType === 'bro' ? 'add node' : 'add node'\"\n        :visible.sync=\"dialogVisible\"\n        width=\"600px\"\n        @closed=\"form = {}\"\n        :destroy-on-close=\"true\"\n        :lock-scroll=\"false\"\n        :append-to-body=\"true\"\n        v-if=\"selectNodeInfo\"\n      >\n      <!-- selectNodeInfo -->\n        <el-form label-width=\"80px\" class=\"form-con\">\n          <el-form-item label=\"Content\">\n            <el-input\n              type=\"textarea\"\n              :rows=\"2\"\n              v-model=\"selectNodeInfo.Name\"\n              class=\"ele-width\"\n              maxLength=\"64\"\n            ></el-input>\n          </el-form-item>\n        </el-form>\n        <template v-slot:footer>\n          <div class=\"right mr-10\">\n            <el-button\n              type=\"primary\"\n              class=\"common-btn\"\n              @click=\"sureEditNode\"\n              size=\"medium\"\n              >OK</el-button\n            >\n          </div>\n        </template>\n      </el-dialog>\n    </div>\n\n    <!-- 右键菜单 -->\n    <el-menu\n      class=\"context-menu\"\n      v-show=\"showMenu\"\n      :style=\"{\n        left: menuStyle.left,\n        top: menuStyle.top,\n        bottom: menuStyle.bottom,\n        right: menuStyle.right\n      }\"\n      ref=\"context\"\n    >\n      <slot>\n        <el-menu-item @click=\"addChild\">add node</el-menu-item>\n        <el-menu-item @click=\"addChild\">add GPT node</el-menu-item>\n        <el-menu-item @click=\"delCard\">delete</el-menu-item>\n      </slot>\n    </el-menu>\n  </div>\n</template>\n\n<script>\nclass node {\n  constructor(at) {\n    this.type = at\n    this.node_list = new Array()\n  }\n}\nexport default {\n  watch: {\n    'zoom.value'(val) {\n      const zoom = val / 100\n      this.jm.view.setZoom(zoom)\n    },\n    selectTypes(v) {\n      this.loopTreeData(this.mind.data.children, (item) => {\n        if (v.length) {\n          if (v.includes(item.type)) {\n            this.jm.set_node_color(item.id, this.bgMap[item.type].original, '#fff')\n          } else {\n            this.jm.set_node_color(item.id, this.bgMap[item.type].transparent, '#fff')\n          }\n        } else {\n          this.jm.set_node_color(item.id, this.bgMap[item.type].transparent, '#fff')\n        }\n      })\n    }\n  },\n  computed: {\n    pathColor() {\n      return function (type) {\n        return this.structure.active === type ? this.structure.pathActiveColor : this.structure.pathOrginalColor\n      }\n    },\n    rectColor() {\n      return function (type) {\n        return this.structure.active === type ? this.structure.rectActiveColor : this.structure.rectOrginalColor\n      }\n    }\n  },\n  data() {\n    return {\n      node_map: {},  //存放node 树\n      node_id_count: 100,\n      mind: {\n        meta: {\n          name: '思维导图',\n          author: 'pc',\n          version: '0.2'\n        },\n        format: 'node_tree',\n        data: {\n          id: 'root',\n          topic: 'input',\n          type: '1',\n          direction: 'right',\n          children: [\n            {\n              id: 'easy', // [必选] ID, 所有节点的ID不应有重复，否则ID重复的结节将被忽略\n              topic: 'Easy', // [必选] 节点上显示的内容\n              direction: 'right', // [可选] 节点的方向，此数据仅在第一层节点上有效，目前仅支持 left 和 right 两种，默认为 right\n              expanded: true, // [可选] 该节点是否是展开状态，默认为 true\n              type: '2', // [可选]自定义节点类型\n              children: [\n                { id: 'easy1', topic: 'Easy to show', type: '3' },\n                { id: 'easy2', topic: 'Easy to edit', type: '3' },\n                { id: 'easy3', topic: 'Easy to store', type: '3' },\n                { id: 'easy4', topic: 'Easy to embed', type: '3' }\n              ]\n            },\n            {\n              id: 'open',\n              topic: 'Open Source',\n              direction: 'right',\n              expanded: true,\n              type: '2',\n              children: [\n                { id: 'open1', topic: 'on GitHub', type: '3' },\n                { id: 'open2', topic: 'BSD License', type: '3' }\n              ]\n            },\n            {\n              id: 'powerful',\n              topic: 'Powerful',\n              direction: 'right',\n              type: '2',\n              children: [\n                { id: 'powerful1', topic: 'Base on Javascript', type: '3' },\n                { id: 'powerful2', topic: 'Base on HTML5', type: '3' },\n                { id: 'powerful3', topic: 'Depends on you', type: '3' }\n              ]\n            },\n            {\n              id: 'other',\n              topic: 'test node',\n              direction: 'right',\n              type: '2',\n              children: [\n                { id: 'other1', topic: \"I'm from local variable\", type: '3' },\n                { id: 'other2', topic: 'I can do everything', type: '3' }\n              ]\n            }\n          ]\n        }\n      },\n      options: {\n        container: 'jsmind_container', // [必选] 容器的ID\n        editable: true, // [可选] 是否启用编辑\n        theme: '', // [可选] 主题\n        view: {\n          engine: 'canvas', // 思维导图各节点之间线条的绘制引擎\n          hmargin: 120, // 思维导图距容器外框的最小水平距离\n          vmargin: 50, // 思维导图距容器外框的最小垂直距离\n          line_width: 2, // 思维导图线条的粗细\n          line_color: '#ddd' // 思维导图线条的颜色\n        },\n        layout: {\n          hspace: 100, // 节点之间的水平间距\n          vspace: 20, // 节点之间的垂直间距\n          pspace: 20 // 节点与连接线之间的水平间距（用于容纳节点收缩/展开控制器）\n        },\n        shortcut: { // 禁用快捷键\n          enable: false\n        }\n      },\n      zoom: {\n        value: 100, // 层级大小\n        min: 10, // 最小层级\n        max: 400 // 最大层级\n      },\n      bgMap: {\n        1: {\n          original: 'rgb(251, 151, 200)',\n          transparent: 'rgb(251, 151, 200, 0.2)'\n\n        },\n        2: {\n          original: 'rgb(100, 201, 53)',\n          transparent: 'rgb(100, 201, 53, 0.2)'\n        },\n        3: {\n          original: 'rgb(67, 50, 173)',\n          transparent: 'rgb(67, 50, 173, 0.2)'\n        },\n        4: {\n          original: 'rgb(25, 144, 255)',\n          transparent: 'rgb(25, 144, 255, 0.2)'\n        },\n        5: {\n          original: 'rgb(212, 42, 42)',\n          transparent: 'rgb(212, 42, 42, 0.2)'\n        }\n      },\n      structure: {\n        active: 'right',\n        pathOrginalColor: '#2B2F36',\n        pathActiveColor: '#3370FF',\n        rectOrginalColor: '#C3C6CB',\n        rectActiveColor: '#BACEFD'\n      },\n      dialogVisible: false,\n      selectNodeInfo: {\n        id: null,\n        Name: ''\n      }, // 选中节点信息\n      tempNodeInfo: null, // 保存修改之前的信息\n      createType: '', // 添加平级or子级\n      showMenu: false, // 是否显示右键菜单栏\n      menuStyle: {\n        top: '',\n        bottom: '',\n        left: '',\n        right: ''\n      },\n      filterTypes: [\n        {\n          type: 'r',\n          value: '1',\n          name: 'Root',\n          status: true\n        },\n        {\n          type: 'o',\n          value: '2',\n          name: 'Object',\n          status: true\n        },\n        {\n          type: 'ks',\n          value: '3',\n          name: 'Key Steps',\n          status: true\n        },\n        {\n          type: 'p',\n          value: '4',\n          name: 'Programming',\n          status: true\n        },\n        {\n          type: 'c',\n          value: '5',\n          name: 'code',\n          status: true\n        }\n      ],\n      typeQueue: new Set(['1', '2', '3', '4', '5']), // 选中types Set\n      selectTypes: ['1', '2', '3', '4', '5'] // 选中types Array\n    }\n  },\n  methods: {\n    // 筛选树结构\n    toggleFilter(item) {\n      item.status = !item.status\n      item.status ? this.typeQueue.add(item.value) : this.typeQueue.delete(item.value)\n      this.selectTypes = [...this.typeQueue]\n    },\n\n    // 重置视图\n    reset() {\n      document.querySelector('.root').scrollIntoView({\n        block: 'center',\n        behavior: 'smooth'\n      })\n    },\n\n    // 缩小\n    zoomOut() {\n      this.jm.view.zoomOut()\n      this.zoom.value = parseInt(this.jm.view.actualZoom * 100)\n    },\n    // 放大\n    zoomIn() {\n      this.jm.view.zoomIn()\n      this.zoom.value = parseInt(this.jm.view.actualZoom * 100)\n    },\n\n    // 循环树结构\n    loopTreeData(list, callback) {\n      (function doOneFloor(list) {\n        if (Array.isArray(list)) {\n          for (let i = 0; i < list.length; i++) {\n            const item = list[i]\n            callback(item, i)\n            if (item.children && item.children.length > 0) {\n              doOneFloor(item.children)\n            }\n          }\n        }\n      })(list)\n    },\n\n    // 设置背景颜色\n    setColor() {\n      this.jm.set_node_color('root', this.bgMap[1].original, '#fff')\n      this.loopTreeData(this.mind.data.children, (item) => {\n        if (this.selectTypes.length) {\n          if (this.selectTypes.includes(item.type)) {\n            this.jm.set_node_color(item.id, this.bgMap[item.type].original, '#fff')\n          } else {\n            this.jm.set_node_color(item.id, this.bgMap[item.type].transparent, '#fff')\n          }\n        } else {\n          this.jm.set_node_color(item.id, this.bgMap[item.type].transparent, '#fff')\n        }\n      })\n    },\n\n    // 切换思维导图结构\n    toggleStucture(type) {\n      if (this.structure.active === type) return\n      this.structure.active = 'right'\n      switch (type) {\n        case 'side':\n          // 两边分布\n          this.loopTreeData(this.mind.data.children, (item, i) => { item.direction = i % 2 ? 'left' : 'right' })\n          break\n\n        case 'left':\n          // 向左分布\n          this.loopTreeData(this.mind.data.children, (item) => { item.direction = 'left' })\n          break\n\n        case 'right':\n          // 向右分布\n          this.loopTreeData(this.mind.data.children, (item) => { item.direction = 'right' })\n          break\n\n        default:\n          break\n      }\n\n      this.jm.show(this.mind)\n      this.init()\n    },\n\n    // 初始化配置\n    init() {\n\n      this.jm.view.minZoom = 0.1\n      this.jm.view.maxZoom = 5\n      this.jm.expand_all()\n      this.setColor()\n\n      // 重写编辑完成事件\n      this.jm.view.edit_node_end = () => {\n        const node = this.jm.view.get_editing_node()\n        const viewData = node._data.view\n        const element = viewData.element\n        element.style.zIndex = 'auto'\n        if (node.topic === this.editor.value) {\n          this.jm.update_node(node.id, node.topic)\n          return\n        }\n        node.topic = this.editor.value\n        if (!node.topic) {\n          this.$message.info('please input content')\n        }\n        this.jm.update_node(node.id, node.topic)\n\n        // TODO 调接口\n      }\n\n      // 右键菜单\n      this.jm.view.add_event(this.editor, 'contextmenu', (e) => {\n        const selectedNode = this.jm.get_selected_node()\n        console.log(\"selectNode:\" + selectedNode.data.type)\n        //&& selectedNode.data.type\n        if (selectedNode) {\n          e.preventDefault()\n          const el = document.querySelector('.context-menu .el-menu-item')\n          const width = parseFloat(window.getComputedStyle(el).width)\n          const height = parseFloat(window.getComputedStyle(el).height) * 3 + 12\n          const windowHeight = window.innerHeight\n          const windowWidth = window.innerWidth\n\n          // 极限位置 避免越界\n          if (e.clientY + height > windowHeight) {\n            this.menuStyle.left = e.clientX + 'px'\n            this.menuStyle.top = 'unset'\n            this.menuStyle.bottom = 0\n          } else if (e.clientX + width > windowWidth) {\n            this.menuStyle.top = e.clientY + 'px'\n            this.menuStyle.left = 'unset'\n            this.menuStyle.right = 0\n          } else {\n            this.menuStyle.left = e.clientX + 'px'\n            this.menuStyle.top = e.clientY + 'px'\n            this.menuStyle.bottom = 'unset'\n          }\n          this.showMenu = true\n        } else {\n          this.showMenu = false\n        }\n      })\n      this.node_map = new Map([[]]);\n      var root = this.jm.get_root();\n      var root_node = new node(1);\n      this.node_map.set(root.id, root_node);\n    },\n    // 获取选中标签的 ID\n    get_selected_nodeid() {\n      const selectedNode = this.jm.get_selected_node()\n      if (selectedNode) {\n        return selectedNode.id\n      } else {\n        return null\n      }\n    },\n\n    // 保存节点\n    sureEditNode() {\n      if (!this.selectNodeInfo.Name) {\n        this.$message.info('please input content')\n        return\n      }\n\n      if (this.createType === 'bro') {\n        // 平级\n        // TODO \n        // const selectedNode = this.jm.get_selected_node()\n        // const selectedNode_id = selectedNode.id\n        // this.jm.add_node(selectedNode, ++this.node_id_count, this.selectNodeInfo.Name)\n        // // var cur_type = this.node_map.get(selectedNode_id).type\n        // var cur_type = 3\n        // this.jm.set_node_color(this.node_id_count, this.bgMap[cur_type + 1].original, '#fff')\n        // var new_node = new node(cur_type + 1)\n        // this.map.add(this.node_id_count, new_node)\n      } else {\n        // 子级\n        // TODO \n        const selectedNode = this.jm.get_selected_node()\n        const selectedNode_id = selectedNode.id\n        this.jm.add_node(selectedNode, ++this.node_id_count, this.selectNodeInfo.Name, null, 'right')\n        if (this.node_map.get(selectedNode_id)) {\n          let cur_type = this.node_map.get(selectedNode_id).type\n          // var cur_type = 3\n          console.log(\"curtype:\" + this.node_map.get(selectedNode_id))\n        }\n        // let cur_type = this.node_map.get(selectedNode_id).type\n        cur_type = 3\n        this.jm.set_node_color(this.node_id_count, this.bgMap[cur_type + 1].original, '#fff')\n        var new_node = new node(cur_type + 1)\n        this.node_map.set(this.node_id_count, new_node)\n      }\n      this.dialogVisible = false\n    },\n\n    // 拖拽\n    handleDrop(draggingNode, dropNode) {\n      // 前一个兄弟节点\n      const prevNode = this.jm.find_node_before(dropNode)\n      // 获取移动后的node\n      const dragForm = {\n        modelId: '',\n        treeNum: !prevNode ? draggingNode : prevNode.id,\n        thisTreeNum: dropNode\n      }\n      console.log('dragForm', dragForm)\n\n      // TODO 调接口\n    },\n    // 单击重置选中背景颜色\n    nodeClick() {\n      const selectedId = this.get_selected_nodeid()\n      if (!selectedId) return\n      const nodeObj = this.jm.get_node(selectedId)\n      this.jm.set_node_color(selectedId, nodeObj.data['background-color'], '#fff')\n    },\n\n    // 插入卡片\n    insertNode() {\n      const selectedNode = this.jm.get_selected_node()\n      if (selectedNode.data) {\n        this.$emit('insert', selectedNode.data)\n      } else {\n        this.$message.error('please select one node')\n      }\n      this.showMenu = false\n    },\n    // 插入平级\n    addBrother() {\n      const selectedNode = this.jm.get_selected_node()\n      if (selectedNode.data) {\n        this.dialogVisible = true\n        this.selectNodeInfo = {\n          id: selectedNode.data.num,\n          Name: ''\n        }\n        this.createType = 'bro'\n      } else {\n        this.$message.error('please select one node')\n      }\n\n      this.showMenu = false\n    },\n\n    // 插入子级\n    addChild() {\n      const selectedNode = this.jm.get_selected_node()\n      if (selectedNode.data) {\n        this.dialogVisible = true\n        this.selectNodeInfo = {\n          id: selectedNode.data.num,\n          Name: ''\n        }\n        this.createType = 'child'\n      } else {\n        this.$message.error('please select one node')\n      }\n\n      this.showMenu = false\n    },\n\n    // 删除卡片\n    delCard() {\n      const selectedNode = this.jm.get_selected_node()\n      if (selectedNode.data) {\n        // TODO\n        this.jm.remove_node(selectedNode.id)\n        // 获取数据\n        console.log(this.jm.get_data('node_tree'))\n      } else {\n        this.$message.error('please select one node')\n      }\n      this.showMenu = false\n    },\n\n    // 鼠标滚轮放大缩小\n    mouseWheel() {\n      if (document.addEventListener) {\n        document.addEventListener('domMouseScroll', this.scrollFunc, false)\n      }\n      this.$refs.container.onmousewheel = this.scrollFunc\n    },\n    // 滚轮缩放\n    scrollFunc(e) {\n      e = e || window.event\n      if (e.wheelDelta) {\n        if (e.wheelDelta > 0) {\n          this.zoomIn()\n        } else {\n          this.zoomOut()\n        }\n      } else if (e.detail) {\n        if (e.detail > 0) {\n          this.zoomIn()\n        } else {\n          this.zoomOut()\n        }\n      }\n      e.preventDefault()\n      this.jm.resize()\n    },\n\n    // 导出图片\n    screen_shot() {\n      // 去除透明度\n      this.loopTreeData(this.mind.data.children, (item) => this.jm.set_node_color(item.id, this.bgMap[item.type].original, '#fff'))\n      try {\n        this.jm.screenshot.shootDownload()\n      } catch (error) {\n        console.log(error)\n      }\n      setTimeout(() => {\n        this.setColor()\n      }, 1000)\n    },\n    // 鼠标拖拽\n    mouseDrag() {\n      // 里层\n      const el = document.querySelector('.jsmind-inner')\n      // 选中节点\n      let selected\n\n      el.onmousedown = (ev) => {\n        // 选中节点\n        selected = this.jm.get_selected_node()\n        // 标识 是否拖拽节点 避免冲突\n        this.dragNodeFlag = !!selected\n\n        const disX = ev.clientX\n        const disY = ev.clientY\n        const originalScrollLeft = el.scrollLeft\n        const originalScrollTop = el.scrollTop\n        const originalScrollBehavior = el.style['scroll-behavior']\n        const originalPointerEvents = el.style['pointer-events']\n        // auto: 默认值，表示滚动框立即滚动到指定位置。\n        el.style['scroll-behavior'] = 'auto'\n        // 鼠标移动事件是监听的整个document，这样可以使鼠标能够在元素外部移动的时候也能实现拖动\n        document.onmousemove = (ev) => {\n          if (this.dragNodeFlag) return\n          this.drag = false\n          ev.preventDefault()\n          // 计算拖拽的偏移距离\n          const distanceX = ev.clientX - disX\n          const distanceY = ev.clientY - disY\n\n          el.scrollTo(originalScrollLeft - distanceX, originalScrollTop - distanceY)\n\n          // 在鼠标拖动的时候将点击事件屏蔽掉\n          el.style['pointer-events'] = 'none'\n          el.style.cursor = 'grabbing'\n        }\n        document.onmouseup = () => {\n          if (!this.dragNodeFlag) {\n            el.style['scroll-behavior'] = originalScrollBehavior\n            el.style['pointer-events'] = originalPointerEvents\n            el.style.cursor = 'grab'\n          }\n          document.onmousemove = document.onmouseup = null\n        }\n      }\n    }\n  },\n  mounted() {\n    this.jm = jsMind.show(this.options, this.mind)\n\n    // 自定义拖拽完成事件\n    jsMind.draggable.prototype.handleDrag = (srcNode, targetNode, targetDirect) => {\n      const nextParentId = srcNode.parent.id\n      this.handleDrop(nextParentId, srcNode.id)\n    }\n    this.editor = this.jm.view.e_editor\n    this.init()\n    this.mouseWheel()\n    this.mouseDrag()\n  },\n  beforeDestroy() {\n    document.removeEventListener('domMouseScroll', this.scrollFunc, false)\n  }\n}\n</script>\n\n<style lang=\"less\">\n@import '../assets/css/style.less';\n</style>\n"]}]}